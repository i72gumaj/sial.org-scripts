#!/usr/bin/env perl
#
# Copies (or moves) the specified files into target directory. Relies on
# buildir script to create directory trees.
#
# With the ZSH shell, a 'take' function can move files into a directory,
# and move the shell into the said directory:
#
# function take {
#   NDIR=`copyto -m $@ | tail -1`
#   [[ $? -ne 0 ]] && exit $?
#   builtin cd "$NDIR"
# }
#
# And a 'bring' function to copy files to a directory:
#
# function bring {
#   NDIR=`copyto $@ | tail -1`
#   [[ $? -ne 0 ]] && exit $?
#   builtin cd "$NDIR"
# }
#
# And a fling to move files into a target directory:
#
# function fling {
#   if [ -z "$FTARGET" -o ! -d "$FTARGET" ]; then
#     echo "error: set FTARGET directory" >&2
#     return 1
#   fi
#   copyto -q -m -d "$FTARGET" $@
# }
#
# To set FTARGET in all shells, see 'allsh'.

use strict;
use warnings;

# command to use to create target directory if does not exist use
# qw(mkdir -p) if you lack buildir (buildir does (hopefully) Clever
# things under CVS and SVN repositories)
my @make_target_dir = qw(buildir);

# commands to use to copy the files in form of "command files dir"
# TODO other methods like rsync to pull from remote hosts, or wget?
my %copy_with = (
  cp             => [qw(cp -p)],
  cp_force       => '-f',
  cp_move        => [qw(mv)],
  cp_move_force  => '-f',
  svn            => [qw(svn copy -q)],
  svn_force      => '--force',
  svn_move       => [qw(svn move)],
  svn_move_force => '--force'
);
my $default_copy_method = 'cp';

use Cwd qw(getcwd realpath);
use File::Spec ();

use File::Basename qw(basename);
my $basename = basename $0;

use Getopt::Std qw(getopts);
my %opts;
getopts 'h?fmqd:', \%opts;

if ( exists $opts{h} or exists $opts{'?'} or !@ARGV ) {
  print_help();
  exit 64;
}

$opts{m} = 1 if $basename eq 'moveto';

# figure out directories to deal with
my $target_dir = $opts{d} || pop @ARGV;
my $target_exists = 0;
if ( -d $target_dir ) {
  $target_dir    = realpath $target_dir;
  $target_exists = 1;
  if ( !$target_dir ) {
    remark( 'error', 'could not determine realpath', { dir => $target_dir } );
    exit 101;
  }
}

my $current_dir = realpath getcwd;
if ( !$current_dir ) {
  remark( 'error', 'could not determine current directory' );
  exit 101;
}
if ( $target_dir eq $current_dir ) {
  # dir already exist, nothing to do!
  exit;
}

if ( !$target_exists ) {
  system @make_target_dir, $target_dir;
  my $status = $? >> 8;
  if ( $status != 0 ) {
    remark(
      'error',
      'problem creating target directory',
      { dir => $target_dir }
    );
    exit $status;
  }
}

# whether target under Subversion
my $subversive_target =
  -f File::Spec->catfile( $target_dir, qw{.svn entries} ) ? 1 : 0;

# sanity checks, copy method determination on input files
my %files;
{
  my ( %seen, @replacing );
  for my $file (@ARGV) {
    if ( $seen{$file}++ ) {
      remark( 'notice', 'skipping duplicate', { file => $file } );
      next;
    }

    if ( !-r $file ) {
      remark( 'warning', 'skipping unreadable file', { file => $file } );
      next;
    }
    if (  $target_exists
      and not exists $opts{f}
      and -e File::Spec->catfile( $target_dir, $file ) ) {

      # TODO other options to handle already existing target file?
      push @replacing, $file;
      next;
    }

    if ( $subversive_target
      and -f File::Spec->catfile( dirname( realpath $file), qw{.svn entries} )
      ) {

      # need URL, so copies from other SVN repositories work right
      if ( my $svn_url = get_subversion_url($file) ) {
        push @{ $files{svn} }, $svn_url;
        next;
      }
    }

    push @{ $files{$default_copy_method} }, $file;
  }

  if (@replacing) {
    remark( 'error', 'cannot replace', { files => join q{,}, @replacing } );
    exit 73;
  }
}

if ( !keys %files ) {
  remark( 'error', 'no files to operate on' );
  exit 102;
}

METHOD: for my $method ( keys %files ) {

  # check whether move involved
  my $command = exists $opts{m} ? "${method}_move" : $method;

  if ( not exists $copy_with{$command} ) {
    remark( 'error', 'no such method', { name => $command } );
    next METHOD;
  }

  # tack on 'force' flag, if needed
  if (  exists $opts{f}
    and exists $copy_with{"${command}_force"}
    and defined $copy_with{"${command}_force"}
    and length $copy_with{"${command}_force"} > 0 ) {

    push @{ $copy_with{$command} }, $copy_with{"${command}_force"};

  }

  system @{ $copy_with{$command} }, @{ $files{$method} }, $target_dir;
  my $status = $? >> 8;
  if ( $status != 0 ) {
    remark(
      'error',
      'problem copying files to target',
      { method => $method }
    );
    exit $status;
  }
}

# for use by subsequent cd, if any
print $target_dir, "\n" unless exists $opts{q};

exit;

# given file, attempts to return URL information Subversion stores
# about files
sub get_subversion_url {
  my $file = shift;

  open my $fh, '-|' or exec qw{svn info}, $file;
  if ( !$fh ) {
    remark(
      'error',
      'could not run svn info',
      { file => $file, errno => $! }
    );
    exit 105;
  }

  my $svn_url;
  while ( my $line = <$fh> ) {
    if ( $line =~ m/^ URL: \s+ (\S.+)/x ) {
      $svn_url = $1;
      last;
    }
  }
  if ( !defined $svn_url ) {
    remark( 'error', 'could not determine svn URL', { file => $file } );
    exit 78;
  }

  return $svn_url;
}

sub print_help {
  warn <<"END_USAGE";
Usage: $basename [opts] file [file2 ...] dir

Takes files into specified dir.

Options:
  -h/-?  Display this message.

  -d dir Specify target directory (instead of last argument).

  -m     Move instead of copying.

  -f     Force copy files.

Run perldoc(1) on this script for additional documentation.

END_USAGE
}

sub remark {
  my $priority   = shift;
  my $message    = shift;
  my $attributes = shift;

  chomp $message;

  my $attr_str;
  if ($attributes) {
    $attr_str = join ', ',
      map { $attributes->{$_} ||= q{}; "$_=$attributes->{$_}" }
      sort keys %$attributes;
  }

  warn "$priority: $message", ( $attr_str ? ": $attr_str" : q{} ), "\n";
  return 1;
}

__END__

=head1 NAME

copyto - copies files into target directory

=head1 SYNOPSIS

Copy password file to temporary directory. Creates target directory if
it does not exist.

  $ copyto /etc/passwd /var/tmp/working
  /var/tmp/working

=head1 DESCRIPTION

=head2 Overview

Copies files into a directory, creating the target directory if it does
not exist. Returns created directory, so subsequent shell command may
optionally chdir into the new directory. With the C<-m> option, files
are moved instead of copied. Copies (or moves) can be forced with the
C<-f> option.

Recommended for the ZSH shell is the following function, which will move
the named files to the target directory, then take the shell to them:

  function take {
    cd `copyto -m $@ | tail -1`
  } 

If the target directory is under Subversion, any of the source files
also under subversion will be copied using C<svn copy> instead of the
default copy command.

=head2 Normal Usage

  $ copyto [opts] file [file2 ...] dir

See L<"OPTIONS"> for details on the command line switches supported.

Error messages will go to the error channel, and the target directory to
standard out. If paranoid, `tail -1` the output to ensure the target
directory is the only thing in the output for a subsequent chdir.

A non-zero exit status indicates something went wrong. See source for
exit status number definitions, though the number might have come from the
"new directory" or "copy files" system calls.

=head1 OPTIONS

This script currently supports the following command line switches:

=over 4

=item B<-h>, B<-?>

Prints a brief usage note about the script.

=item B<-m>

Move files instead of copying them.

=item B<-f>

Force copy files. Prevents script from complaining about and stopping
when the target contains files that would be replaced. May not prevent
interactive options on the copy command called out to later.

=item B<-d> I<directory>

Specify target directory. Without this option set, the target directory
is read from the last command line argument.

=item B<-q>

Hide notice messages and do not print target directory. For use as a
regular 'cp' replacement, where one wants the target directory created,
but the resulting directory not mentioned.

Will break usage that relies on target directory being printed.

=back

=head1 SECURITY

Not for use where security is required, as files and directories are not
taint checked, nor is the "chdir to output of this script" step.

=head1 BUGS

=head2 Reporting Bugs

Newer versions of this script may be available from:

http://github.com/thrig/sial.org-scripts/tree/master

If the bug is in the latest version, send a report to the author.
Patches that fix problems or add new features are welcome.

=head2 Known Issues

No known issues.

=head1 SEE ALSO

perl(1)

=head1 AUTHOR

thrig - Jeremy Mates (cpan:JMATES) C<< <jmates at cpan.org> >>

=head1 COPYRIGHT

Copyright (c) 2015 Jeremy Mates

     Permission to use, copy, modify, and/or distribute this software for
     any purpose with or without fee is hereby granted, provided that the
     above copyright notice and this permission notice appear in all
     copies.

     THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
     WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
     WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
     AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
     DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA
     OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
     TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
     PERFORMANCE OF THIS SOFTWARE.

=head1 HISTORY

Based on 'take', 'take.pl', and the csh alias setting found in Damian
Conway's "stuff from my home directory" tarball that was posted to the
Seattle Perl User's Group e-mail list.

=head1 SCRIPT CATEGORIES

Utilities
Unix/System_administration

=cut
