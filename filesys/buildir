#!/usr/bin/env perl
#
# Like 'mkdir -p', but does 'cvs add' if under CVS sandboxes, or other
# extensible actions. Prints directories created when run with -p
# option, used by other tools, such as a shell function to change the
# working directory to a newly created directory:
#
# function ndir {
#   NDIR=`buildir -p $@ | tail -1`
#   [ $? -ne 0 ] && exit $?
#   builtin cd "$NDIR"
# }

use strict;
use warnings;

use File::Spec ();

use Getopt::Std qw(getopts);
my %opts;
getopts 'h?p', \%opts;

if ( exists $opts{h} or exists $opts{'?'} or not @ARGV ) {
  print_help();
  exit 64;
}

my $start_dir = File::Spec->curdir();

for my $dir (@ARGV) {

  my @dirbits = File::Spec->splitdir($dir);
  my @seen;

  # start directory build from working directory for relative paths,
  # root directory for absolute paths
  my $parent = $start_dir;
  if ( $dirbits[0] eq q{} ) {
    $parent = File::Spec->rootdir();
    shift @dirbits;
    push @seen, $parent;
  }
  if ( !chdir $parent ) {
    remark(
      'error',
      'could not chdir',
      { errno => $!, dir => File::Spec->catfile(@seen) }
    );
    exit 69;
  }

  # work through dirbits, as not all mkdir support -p, and do special
  # things under CVS and Subversion sandboxes
  #
  # KLUGE // in paths add empty bits to the list, evict with grep
  for my $dirbit ( grep { defined and $_ ne q{} } @dirbits ) {
    push @seen, $dirbit;

    if ( -d $dirbit ) {
      next;
    }

    if ( -f File::Spec->catfile(qw{CVS Root}) ) {
      # CVS: add dir automagically
      if ( !mkdir $dirbit ) {
        remark(
          'error',
          'could not create directory',
          { errno => $!, dir => File::Spec->catfile(@seen) }
        );
        exit 69;
      }
      system qw{cvs -Q add}, $dirbit;

    } elsif ( -f File::Spec->catfile(qw{.svn entries}) ) {
      # Subversion: use mkdir subcommand (not tested much!)
      system qw{svn mkdir}, $dirbit;
      my $status = $? >> 8;
      if ( $status != 0 ) {
        remark(
          'error',
          'could not create directory',
          { errno => $!, dir => File::Spec->catfile(@seen), type => 'svn' }
        );
        exit 69;
      }

    } else {
      if ( !mkdir $dirbit ) {
        remark(
          'error',
          'could not create directory',
          { errno => $!, dir => File::Spec->catfile(@seen) }
        );
        exit 69;
      }
    }

  } continue {

    if ( !chdir $dirbit ) {
      remark(
        'error',
        'could not chdir',
        { errno => $!, dir => File::Spec->catfile(@seen) }
      );
      exit 69;
    }
  }

  print $dir, $/ if exists $opts{p};
}

sub print_help {
  warn <<"END_USAGE";
Usage: $0 [options] dir [dir2 ...]

Creates directories.

Options:
  -h/-?  Display this message.

  -p     Print directories created.

END_USAGE
}

sub remark {
  my $priority   = shift;
  my $message    = shift;
  my $attributes = shift;

  chomp $message;

  my $attr_str;
  if ($attributes) {
    $attr_str = join ', ',
      map { $attributes->{$_} ||= q{}; "$_=$attributes->{$_}" }
      sort keys %$attributes;
  }

  warn "$priority: $message", ( $attr_str ? ": $attr_str" : q{} ), "\n";
  return 1;
}
