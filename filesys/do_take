#!/usr/bin/env perl
#
# Takes specified files into target directory. TODO does "copyto"
# replace this script, or? ...

use strict;
use warnings;

# command to use to create target directory if does not exist
# use qw(mkdir -p) if you lack ndir
my @make_target_dir = qw(ndir);

# command to use to copy the files in form of "command files dir"
my @copy_files = qw(cp -p);

use Cwd qw(getcwd realpath);
use File::Spec;

sub print_usage;
sub remark;

print_usage unless @ARGV > 1;

# figure out directories to deal with
my $target_dir    = pop @ARGV;
my $target_exists = 0;
if (-d $target_dir) {
  $target_dir    = realpath $target_dir;
  $target_exists = 1;
  unless ($target_dir) {
    remark 'error', 'could not determine realpath to target';
    exit 101;
  }
}

my $current_dir = realpath getcwd;
unless ($current_dir) {
  remark 'error', 'could not determine current directory';
  exit 101;
}
if ($target_dir eq $current_dir) {
  remark 'error', "target same as working directory: $current_dir";
  exit 101;
}

# sanity checks on input files
my %files;
for my $file (@ARGV) {
  if (exists $files{$file}) {
    remark 'notice', "skipping duplicate file: $file";
    next;
  }
  unless (-r $file) {
    remark 'warning', "skipping unreadable file: $file";
    next;
  }
  if ($target_exists and -e File::Spec->catfile($target_dir, $file)) {

    # TODO other options to handle already existing target file
    remark 'warning', "skipping as already in target: $file";
    next;
  }

  $files{$file} = 1;
}

my @files = keys %files;
unless (@files) {
  remark 'error', 'no files to operate on';
  exit 102;
}

unless ($target_exists) {
  system @make_target_dir, $target_dir;
  my $status = $? >> 8;
  if ($status != 0) {
    remark 'error', "problem creating target directory: $target_dir";
    exit $status;
  }
}

{
  system @copy_files, @files, $target_dir;
  my $status = $? >> 8;
  if ($status != 0) {
    remark 'error', 'problem copying files to target';
    exit $status;
  }
}

# for use by subsequent cd
print $target_dir, "\n";

sub print_usage {
  warn "usage: $0 file [file2 ...] dir\n";
  exit 64;
}

sub remark {
  my $priority = shift;
  my $message  = shift;

  warn "$priority: $message\n";
}
