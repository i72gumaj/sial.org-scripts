#!/usr/bin/env perl
#
# Some old locking thing (I pretty much don't use locking these days, and
# instead rely usually on rename() calls e.g. via File::AtomicWrite.)
#
# Run perldoc(1) on this file for additional documentation.

use strict;

use Carp;
use Fcntl qw(:DEFAULT :flock);
use Getopt::Std;

my (%opts, %locks, $duration);

# parse command-line options
getopts('h?wd:', \%opts);

help() if exists $opts{h} or exists $opts{'?'} or not @ARGV;

if (exists $opts{d}) {
  if ($opts{d} =~ /^\d+$/) {
    $duration = $opts{d};

  } elsif (my @matches = $opts{d} =~ /(\d+\s*[wdhms])/g) {
    my %factor = (
      'w' => 604800,
      'd' => 86400,
      'h' => 3600,
      'm' => 60,
      's' => 1,
    );

    $duration = 0;
    for (@matches) {
      /(\d+)\s*(\w)/;
      $duration += $1 * $factor{$2};
    }
  } else {
    die "error: could not parse duration: $opts{d}\n";
  }
}

for (@ARGV) {
  unless (-f) {
    warn "notice: $_ is not file, skipping\n";
    next;
  }

  if (exists $opts{w}) {
    sysopen $locks{$_}, $_, O_RDWR or die "error: could not open $_: $!\n";
    unless (flock $locks{$_}, LOCK_NB | LOCK_EX) {
      warn "notice: waiting for write lock on $_\n";
      flock $locks{$_}, LOCK_EX;
    }
  } else {
    sysopen $locks{$_}, $_,O_RDONLY or die "error: could not open $_: $!\n";
    unless (flock $locks{$_}, LOCK_NB | LOCK_SH) {
      warn "notice: waiting for read lock on $_\n";
      flock $locks{$_}, LOCK_SH;
    }
  }
}

sleep $duration;

exit;

######################################################################
#
# SUBROUTINES

# a generic help blarb
sub help {
  warn <<"HELP";
Usage: $0 [opts] files

Options:
  -h/-?  Display this message

  -w     Obtain exclusive write lock (default: read lock)
  
  -d dur Delay to hold lock open for

Run perldoc(1) on this script for additional documentation.

HELP
  exit 64;
}

######################################################################
#
# DOCUMENTATION

=head1 NAME

lockit - locks files

=head1 SYNOPSIS

Read lock on file:

  $ lockit /etc/passwd

Write lock on several:

  $ lockit /etc/passwd /etc/syslog.conf

=head1 DESCRIPTION

=head2 Overview

Easy means of applying various locks on a specified file.

=head2 Normal Usage

  $ lockit [options] files

See L<"OPTIONS"> for details on the command line switches supported.

=head1 OPTIONS

This script currently supports the following command line switches:

=over 4

=item B<-h>, B<-?>

Prints a brief usage note.

=item B<-w>

Obtain an exclusive write lock instead of default shared lock.

=item B<-d> I<duration>

Hold locks open for the specified duration.  Duration may either be
raw seconds (60), or a shorthand format (1m).

=back

=head1 BUGS

=head2 Reporting Bugs

Newer versions of this script may be available from:

http://github.com/thrig/sial.org-scripts/tree/master

If the bug is in the latest version, send a report to the author.
Patches that fix problems or add new features are welcome.

=head2 Known Issues

No known bugs.

=head1 TODO

Remove sleep duration, replace with something that executes a command
(which could then be 'sleep 60' or something).

=head1 SEE ALSO

flock(2), perl(1)

=head1 AUTHOR

thrig - Jeremy Mates (cpan:JMATES) C<< <jmates at cpan.org> >>

=head1 COPYRIGHT

Copyright (c) 2015 Jeremy Mates

     Permission to use, copy, modify, and/or distribute this software for
     any purpose with or without fee is hereby granted, provided that the
     above copyright notice and this permission notice appear in all
     copies.

     THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
     WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
     WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
     AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
     DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA
     OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
     TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
     PERFORMANCE OF THIS SOFTWARE.

=cut
