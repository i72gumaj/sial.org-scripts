#!/usr/bin/env perl
#
# Consumes inodes. Write permission to PWD would be handy to grant prior; an
# instance of this program will onlye write to a directory named after its
# process ID, or the second argument to the program. Bails out if anything
# goes awry.
#
#   inodenom 999999
#
# Or in parallel filling the directories 'a' and 'b':
#
#   inodenom 999999 a &
#   inodenom 999999 b &

use 5.10.0;
use strict;
use warnings;

use autodie qw/chdir mkdir/;
use File::Basename qw/basename/;
use Scalar::Util qw/looks_like_number/;
use Time::HiRes qw/gettimeofday tv_interval/;

# limit on files per directory
my $DIR_MAX   = 49999;
# how deep to go
my $DEPTH_MAX = 32;

my $inode_to_eat = shift;
my $prefix = shift || $$;
if ( !defined $inode_to_eat or !looks_like_number $inode_to_eat) {
  printf STDERR "Usage: %s inode-count [prefix]\n", basename($0);
  exit 64;
}

$SIG{INT} = sub { reportrate(); exit 1 };

my $start = [gettimeofday];

mkdir $prefix;
chdir $prefix;
my $eaten = 1;

mktree();

sub mktree {
  my $depth = shift // 0;
  for my $d ( 0 .. $DIR_MAX ) {
    mkdir $d;
    if ( ++$eaten >= $inode_to_eat ) {
      reportrate();
      exit 0;
    }
    if ( ++$depth < $DEPTH_MAX ) {
      chdir $d;
      mktree($depth);
      chdir '..';
    }
  }
}

sub reportrate {
  printf STDERR "eaten $eaten at rate of %.2f/s", tv_interval($start);
}
