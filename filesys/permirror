#!/usr/bin/env perl
#
# Mirrors Unix permissions and ownerships from a named source directory
# to a (presumably identical yet with wrong permissions and ownership)
# destination directory. Fiddle with the variables below as necessary.
#
# This is a new script, it probably has bugs, perhaps with symlinks.
# Inspect the dry_run verbose output before letting it run rampant.

use strict;
use warnings;

use Cwd qw(abs_path);
use File::Find qw(finddepth);
use File::Spec ();

# TODO fiddle with these to make the script actually do things.
my $dry_run = 1;
my $verbose = 1;

my $src_dir = shift || print_help();
my $dst_dir = shift || print_help();

if ( !-d $src_dir or !-d $dst_dir ) {
  die "error: $src_dir or $dst_dir not a directory\n";
}

if ( abs_path($src_dir) eq abs_path($dst_dir) ) {
  warn abs_path($src_dir);
  warn abs_path($dst_dir);
  die "error: cowardly refusing to apply a directory to itself\n";
}

finddepth( { wanted => \&handle_file, no_chdir => 1 }, $src_dir );

sub handle_file {
  my %file_attr;

  $file_attr{src_file} = File::Spec->abs2rel( $File::Find::name, $src_dir );

  ( $file_attr{mode}, $file_attr{uid}, $file_attr{gid} ) =
    ( stat($File::Find::name) )[ 2, 4, 5 ];
  $file_attr{mode} = $file_attr{mode} & 07777;

  $file_attr{dst_path} =
    File::Spec->catfile( $dst_dir, $file_attr{src_file} );

  if ( !-e $file_attr{dst_path} ) {
    warn "notice: skipping non-existent target: $file_attr{dst_path}\n";
    return;
  }

  if ( !$dry_run ) {
    my $changed = chmod( $file_attr{mode}, $file_attr{dst_path} );
    if ( $changed != 1 ) {
      die "error: unable to chmod on $file_attr{dst_path}\n";
    }
    $changed =
      chown( $file_attr{uid}, $file_attr{gid}, $file_attr{dst_path} );
    if ( $changed != 1 ) {
      die "error: unable to chown on $file_attr{dst_path}\n";
    }
  }
  if ($verbose) {
    print $file_attr{src_file}, ' (',
      join( ',',
      sprintf( "%04o", $file_attr{mode} ),
      $file_attr{uid}, $file_attr{gid} ),
      ') -> ', $file_attr{dst_path},
      "\n";
  }
}

sub print_help {
  print <<"END_HELP";
Usage: $0 src-dir dst-dir
END_HELP
}
