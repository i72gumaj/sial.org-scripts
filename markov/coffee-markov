#!/usr/bin/env perl
#
# Example 2nd order markov (with fallback to first) for a model citizen
# before lunch (see DATA, below). Consider instead: http://hailo.org/

use strict;
use warnings;

# see "Non-Uniform Random Variate Generation" by Luc Devroye for gory details
use Math::Random::Discrete;

my %choice;
load_choices( \%choice );
normalize_choices( \%choice );

my @action = 'awaken';
while ( my $choice = next_choice( \@action, \%choice ) ) {
  last unless defined $choice;
  push @action, $choice;
  last unless exists $choice{$choice};
}
print join( ' ', @action ), "\n";

sub next_choice {
  my ( $actions, $choices ) = @_;

  my ( $consid, $pick );
  if ( @$actions > 1 ) {
    $consid = join '.', @{$actions}[ -2 .. -1 ];
    $pick = $choices->{$consid}->{choice}->rand if exists $choices->{$consid};
  }
  # But fallback to 1st order if nothing for 2nd (Irulan on beginnings,
  # or perhaps when adjusting the choices on the fly).
  if ( !defined $pick ) {
    $consid = $actions->[-1];
    $pick   = $choices->{$consid}->{choice}->rand;
  }

  return $pick;
}

sub load_choices {
  my ($choices) = @_;
  while ( my $line = readline DATA ) {
    my @actions = split ' ', $line;
    for my $i ( 0 .. $#actions - 1 ) {
      # first depth
      $choices->{ $actions[$i] }->{states}->{ $actions[ $i + 1 ] }++;
      # second depth via "key.key"
      $choices->{ join '.', @actions[ $i .. $i + 1 ] }->{states}
        ->{ $actions[ $i + 2 ] }++
        unless $i > $#actions - 2;
    }
  }
}

sub normalize_choices {
  my ($choices) = @_;

  for my $node ( keys %$choices ) {
    my ( @things, @weights );
    for my $thing ( keys %{ $choices->{$node}->{states} } ) {
      push @things,  $thing;
      push @weights, $choices->{$node}->{states}->{$thing};
    }
    die "error: node '$node' lacks choices\n" unless @things;

    $choices->{$node}->{choice} =
      Math::Random::Discrete->new( \@weights, \@things );
  }
}

__DATA__
awaken coffee walk coffee coffee lunch
awaken coffee walk coffee coffee work lunch
awaken coffee walk coffee coffee work lunch
awaken coffee walk coffee coffee work lunch
awaken coffee walk coffee coffee work lunch
awaken coffee walk coffee coffee work lunch
awaken coffee walk coffee lunch
awaken coffee walk coffee work lunch
awaken coffee walk coffee work lunch
awaken walk coffee coffee work coffee lunch
awaken walk coffee coffee work lunch
awaken walk coffee coffee work lunch
awaken walk coffee coffee work lunch
awaken walk coffee coffee work lunch
awaken walk coffee lunch
awaken walk coffee work coffee lunch
awaken walk coffee work lunch
awaken walk coffee work lunch
