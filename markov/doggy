#!/usr/bin/env perl
#
# Markov model of dog days (a discrete state dog). Consider instead:
# http://hailo.org/

use strict;
use warnings;
use feature qw(say);

# see "Non-Uniform Random Variate Generation" by Luc Devroye for gory details
use Math::Random::Discrete;

my %Dog_Days = (
  kennel => { states => { door  => 0.5, gate1 => 0.5 }, },
  door   => { states => { tree  => 1 }, },
  gate1  => { states => { tree  => 1 }, },
  gate2  => { states => { loops => 1 }, },
  tree   => { states => { tree  => 0.9, loops => 0.1 }, },
  loops => { states => { loops => 0.83, gate2 => 0.16, kennel => 0.1 }, },
);
cummulate( \%Dog_Days );

my $current_state = 'kennel';
do {
  say $current_state;
  if ( !exists $Dog_Days{$current_state} ) {
    warn "notice: aborting as no such node '$current_state'\n";
    $current_state = 'kennel';
  } else {
    $current_state = $Dog_Days{$current_state}->{pick}->rand;
  }
} until $current_state eq 'kennel';

say $current_state;
exit 0;

sub cummulate {
  my ($decisions) = @_;
  for my $node ( keys %$decisions ) {
    my ( @things, @weights );
    for my $thing ( keys %{ $decisions->{$node}->{states} } ) {
      push @things,  $thing;
      push @weights, $decisions->{$node}->{states}->{$thing};
    }
    die "error: node '$node' lacks choices\n" unless @things;

    $decisions->{$node}->{pick} =
      Math::Random::Discrete->new( \@weights, \@things );
  }
}
