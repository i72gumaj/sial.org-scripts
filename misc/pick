#!/usr/bin/env perl
#
# Pick or reject items from a list of input data.

use strict;
use warnings;

END {
  # Report problems when writing to stdout (perldoc perlopentut)
  unless ( close(STDOUT) ) {
    warn "error: problem closing STDOUT: $!\n";
    exit 74;
  }
}

# specifications for getraw utility
my $specs = {
  y => 'Yy\ \n:+ Nn:-',
  n => 'Nn\ \n:- Yy:+'
};
my $spec = $specs->{y};

use Getopt::Std;
my %opts;
getopts('h?vyn0o:d:f:', \%opts);
help() if exists $opts{h} or exists $opts{'?'};

if (exists $opts{n}) {
  $spec = $specs->{n};
} elsif (exists $opts{o}) {
  $spec = $opts{o};
}

my $output_delim;

# xargs -0 style handling
$output_delim = $/ = '\0' if exists $opts{0};

$/ = $opts{d} if exists $opts{d};
$output_delim = (exists $opts{f}) ? $opts{f} : $/;

# escape \'ed things to allow \0 -> null character
$/ =~ s/(\\.)/qq!"$1"!/eeg;
$output_delim =~ s/(\\.)/qq!"$1"!/eeg;

my ($last, $lastprinted);
my $count = 0;
my $buffer;

# unbuffer output to play well when in a pipe chain?
$| = 1;

while (<>) {
  chomp;
  $last = $_;

  # get raw keystroke, want 0 exit code to accept item
  system qw(getraw -no), $spec, "$_";
  if (0 == $? >> 8) {
    $count++;
    $lastprinted = $_;

    $buffer .= $output_delim unless $count == 1;
    $buffer .= $_;
  }
}

# TODO only warn if verbose on?  use special exit code to denote
# nothing printed?
if ($count == 0) {
  warn "info: no lines printed\n" if exists $opts{v};
  exit 100;
}

print $buffer, "\n";

exit 0;

######################################################################
#
# SUBROUTINES

# a generic help blarb
sub help {
  warn <<"HELP";
Usage: $0 [opts]

Pick or reject items from a list of input data.

Options for version $VERSION:
  -h/-?  Display this message.

  -d dd  Split records on dd instead of default (\$/).
  -f dd  Output records with delimiter dd (default \$/).
  -0     Use NULL as record delimiter (like xargs(1)).

  -y     Default to "yes" to accept item with space/return.
  -n     Default to "no" to skip item.

  -o ss  Custom key mapping specification.

Run perldoc(1) on this script for additional documentation.

HELP
  exit 64;
}

=head1 NAME

pick - pick or reject items from a list of input data

=head1 SYNOPSIS

  $ echo a b c | pick -d ' '

=head1 DESCRIPTION

=head2 Overview

Allows items in input data to be selected or rejected, to reduce the
list to just the items required.

=head2 Normal Usage

  $ pick [options]

See L<"OPTIONS"> for details on the command line switches supported.

=head1 OPTIONS

This script currently supports the following command line switches:

=over 4

=item B<-h>, B<-?>

Prints a brief usage note.

=item B<d> I<delimiter>

Break incoming data on the specified delimiter.  Without B<-d>, $/ is
used (\n by default).  Backslash interpolation will take place on the
I<delimiter>, which allows things like the following.

  -d '\n\n'   # break on "paragraphs"

  -d '\0'     # break on NULL.

=item B<f> I<delimiter>

Optional output delimiter for data.  Default is the value for B<-d>.
Allows one to accept a list in one format and output in another.

=item B<-0>

Shorthand for C<-d '\0'> for compatibility with C<-print0> and
C<xargs -0>.

  $ find . -type f -print0 | pick -0 | xargs -0 rm

The B<-d> and B<-f> options trump the B<-0> option.

=item B<-y>

Default to accepting items (with Y, y, space, or return), N or n
to reject.

=item B<-n>

Default to rejecting items, Y or y to accept.

=item B<-o> I<specification>

Custom specification to pass to getraw.

=item B<-v>

Be verbose about things.  Only a informational note to STDERR if no
items selected, at present.

=back

=head1 DIAGNOSTICS

Currently defined non-zero (error condition) exit codes.

=over 4

=item B<100>

No records from input were printed to output.

=back

=head1 BUGS

=head2 Reporting Bugs

Newer versions of this script may be available from:

http://github.com/thrig/sial.org-scripts/tree/master

If the bug is in the latest version, send a report to the author.
Patches that fix problems or add new features are welcome.

=head2 Known Issues

No known issues.

=head1 SEE ALSO

perl(1)

=head1 AUTHOR

thrig - Jeremy Mates (cpan:JMATES) C<< <jmates at cpan.org> >>

=head1 COPYRIGHT

Copyright (c) 2015 Jeremy Mates

     Permission to use, copy, modify, and/or distribute this software for
     any purpose with or without fee is hereby granted, provided that the
     above copyright notice and this permission notice appear in all
     copies.

     THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
     WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
     WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
     AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
     DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA
     OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
     TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
     PERFORMANCE OF THIS SOFTWARE.

=head1 HISTORY

Based on pick command examples presented in "The Unix Programming
Environment" (ISBN 0-13-937681-X).

http://cm.bell-labs.com/cm/cs/upe/

=cut
