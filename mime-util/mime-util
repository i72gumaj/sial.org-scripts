#!/usr/bin/env perl
#
# Utility to perform various MIME packing and unpacking operations.

use strict;
use warnings;
use Fatal qw(open);
use MIME::Parser ();

# figure out what to do (add more modes here, e.g. one to recheck the output
# from this script?)
my %actions = ( 'unpack-smime' => \&handle_unpack_smime, );
my @actions = sort keys %actions;

my $default_usage = "mode [mode options]\nModes: @actions";

my $mode = shift;
if ( !defined $mode or !exists $actions{$mode} ) {
  $mode ||= '';
  warn "error: no such mode: name=$mode\n";
  print_help();
}

my $exit_value = $actions{$mode}->( $mode, @ARGV );
exit $exit_value;

sub handle_unpack_smime {
  my $mode = shift;
  my $filename = shift || '-';

  my $exit_value = 0;

  my $fh;
  if ( $filename eq '-' ) {
    $fh = \*STDIN;
  } else {
    open $fh, '<', $filename;
  }

  my $parser = MIME::Parser->new();
  $parser->output_to_core(1);

  my $entity;
  eval { $entity = $parser->parse($fh); };
  if ($@) {
    chomp $@;
    remark( 'error', 'parse failed', { file => $filename, errno => $@ } );
    return 1;
  }

  my $parts_count = $entity->parts;

  if ( $parts_count == 0 ) {

    my $part_txt = $entity->bodyhandle->as_string;

    # TODO Report on empty files. May need option to handle this case:
    # pass through if have data on disk, throw error and die, warn, or
    # ignore. Current script: print the raw file through.
    if ( length $part_txt == 0 ) {
      remark( 'warning', 'no MIME data found', { file => $filename }, );

      seek $fh, 0, 0
        or die "error: could not seek on $filename: $!\n";
      print while <$fh>;

    } else {
      print $part_txt;
    }

  } else {
    # KLUGE print out anything not a pkcs7 signature block. May need
    # refinement for other signature types?
    for my $i ( 0 .. $parts_count - 1 ) {
      my $part_ref = $entity->parts($i);

      if ( $part_ref->mime_type eq 'application/x-pkcs7-signature'
        or $part_ref->mime_type eq 'application/pkcs7-signature' ) {
        next;
      }

      $part_ref->bodyhandle->print( \*STDOUT );
    }
  }

  return $exit_value;
}

sub remark {
  my $priority   = shift;
  my $message    = shift;
  my $attributes = shift;

  chomp $message;

  my $attr_str;
  if ($attributes) {
    $attr_str = join ', ',
      map { $attributes->{$_} ||= q{}; "$_=$attributes->{$_}" }
      sort keys %$attributes;
  }

  warn "$priority: $message", ( $attr_str ? ": $attr_str" : q{} ), "\n";
  return 1;
}

sub print_help {
  my %param = @_;

  my $usage = $default_usage;
  if (  exists $param{usage}
    and defined $param{usage}
    and length $param{usage} > 1 ) {
    $usage = $param{usage};
  }

  warn <<"HELP";
Usage: $0 $usage

Utility to perform various MIME packing and unpacking operations.

HELP
  exit 64;
}
