#!/usr/bin/env perl
#
# Helper script for cfengine 2.

use strict;
use warnings;

use File::Spec ();
use Getopt::Std qw(getopts);
use Net::DNS ();

END {
  # Report problems when writing to stdout (perldoc perlopentut)
  unless ( close(STDOUT) ) {
    warn "error: problem closing STDOUT: $!\n";
    exit 74;
  }
}

my $mode = shift || die "usage: $0 mode [args]\n";

# Pull mode handlers from the symbol table (probably a bad idea!)
{
  no strict 'refs';
  my $pkgname = __PACKAGE__ . '::';

  my %action_map =
    map { $_ =~ m/^ handle_ (\w{1,32}) /x ? ( $1 => $_ ) : () }
    keys %$pkgname;

  die "error: no such action: name=$mode\n" unless exists $action_map{$mode};
  $action_map{$mode}->(@ARGV);
}

sub handle_append {
  # KLUGE! bleh...
  while (<>) {
    chomp;
    s/(?<!\\)\\/\\\\/gx;
    s/(?<!\\)"/\\"/gx;
    s/(?<=\\\\)"/\\"/gx;
    print q{Append "} . $_ . $/;
  }
}

sub handle_class2host {
  my $dns = Net::DNS::Resolver->new;
  $dns->defnames(0);    # do not search default domain

  my %opts;
  getopts 'd:', \%opts;

  my $domain = $opts{d} if exists $opts{d};

  my $action = q{};
  my %hosts;
  my %host2class;

  # TODO replace with proper grammar parser?
  while (<>) {

    # set what action block we are in, like 'control:'
    if (m/^\s*(\w+):(?!:)/) {
      $action = $1;

      # TODO other aliased names?
      $action = 'classes' if $action eq 'groups';

      next;
    }

    # try to read domain from configuration if not otherwise set
    if (  $action eq 'control'
      and not defined $domain
      and m/^\s* domain \s*=\s* \(\s* (\S+) \s*\)/x ) {
      $domain = $1;
    }

    # match foo = ( bar ) class definitions
    if ( $action eq 'classes' and m/^\s* (\w+) \s*=\s* \(\s* (\S.+?) \s*\)/x )
    {
      my $class = $1;
      my $tmp   = $2;

      # pull out short "hostnames" for consideration
      my @potential = $tmp =~ m/(\w[\w-]+)/g;

      for my $p (@potential) {
        # downcase as DNS case insensitive
        $p = lc $p;

        $hosts{$p}++;
        push @{ $host2class{$p} }, $class;
      }
    }
  }

  die "error: domain not specified nor found\n" unless $domain;
  $domain =~ s/\.$//;

  die "error: unknown domain or domain lookup failure: name=$domain\n"
    unless $dns->query( $domain, 'SOA' );

  for my $host ( sort keys %hosts ) {
    my $hostname = "$host.$domain";
    my $query = $dns->query( $hostname, 'A' );

    # TODO allow templating of output, so can list in format appropriate
    # for other tools easily (SSH host key updating, etc.)
    if ($query) {
      print $hostname, " ", join( ',', @{ $host2class{$host} } ), $/;
    }
  }
}

# generates path to file with ${masterfiles}/... setup
sub handle_copy {

  # TODO config file for this, support multiple
  my @pathmaps = qw(masterfiles);

  for my $filename ( map { File::Spec->rel2abs($_) } @ARGV ) {
    if ( $filename =~ m{ $pathmaps[0] (.*) }x ) {
      print '${', $pathmaps[0], '}', $1, "\n";
    } else {
      print "$filename\n";
    }
  }
}

sub get_ip {
  my $dns = shift;
  my $host = shift || return;
  my @ips;

  my $query = $dns->query( $host, 'A' );
  if ($query) {
    for my $rr ( $query->answer ) {
      next unless $rr->type eq 'A';
      push @ips, $rr->address;
    }
  }
  return wantarray ? @ips : $ips[0];
}
