#!/usr/bin/env perl
#
# Apply XSL files to XML data via the XML::ApplyXSLT module. Run
# perldoc(1) on this script for additional documentation.

use strict;
use warnings;

use File::AtomicWrite ();
use File::Basename qw(basename dirname);
use File::Spec ();
use Getopt::Std qw(getopts);
use XML::ApplyXSLT ();

my $basename = basename($0);

my %axp_defaults    = ( quiet        => 0 );
my %libxml_defaults = ( load_ext_dtd => 0 );

# TODO difference between these two hashes??
my %user_params;
# TODO also need some way to read in arbitrary data to defaults hash
#
# TODO might also need a "class.style" so can tab complete against a list?
my %user_default;

my %opts;
getopts 'h?qc:s:P:o:p:X:', \%opts;
print_help() if $opts{h} or $opts{'?'} or not @ARGV;

$axp_defaults{quiet} = 1 if $opts{q};

$user_default{class} = $opts{c} if exists $opts{c};
$user_default{style} = $opts{s} if exists $opts{s};
$user_default{path}  = $opts{P} if exists $opts{P};

if ( exists $opts{p} ) {
  keyvalue_to_hashref( $opts{p}, \%user_params );
}

if ( exists $opts{X} ) {
  keyvalue_to_hashref( $opts{X}, \%libxml_defaults );
}

# technically optional, but what's the point without rules?
my $rules_file = tilde_expand( $ENV{AXP_RULES} || '~/.axp/rules' );
my $rfh;
unless ( open( $rfh, '<', $rules_file ) ) {
  remark(
    'warning',
    'cannot load rules file',
    { file => $rules_file, errstr => $! }
  );
}

my %applyxslt_args;
$applyxslt_args{rules} = $rfh if defined $rfh;

my $xapply = XML::ApplyXSLT->new(%applyxslt_args);
$xapply->config_libxml( \%libxml_defaults );

END {
  # Report problems when writing to stdout (perldoc perlopentut)
  if ( !exists $opts{o} and !close(STDOUT) ) {
    remark( 'error', 'problem closing stdout', { errstr => $! } );
    exit 74;
  }
}

FILE: for my $file (@ARGV) {
  unless ( -e $file ) {
    remark( 'notice', 'skipping as does not exist', { file => $file } )
      unless exists $axp_defaults{quiet};
    next FILE;
  }

  my $doc;
  unless ( $doc = $xapply->parse($file) ) {
    remark(
      'warning',
      'could not parse file',
      { file => $file, errstr => $xapply->errorstring }
    ) unless exists $axp_defaults{quiet};
    next FILE;
  }

  # TODO this is where the "parent" must be supplied, but for the shell
  # there is no handy "here is the parent directory" I suspect will be
  # available from mod_perl
  my ( $filedata, $defaults, $params ) = $xapply->study( $doc, $file );
  $defaults ||= {};
  $params   ||= {};

  %$defaults = ( %$filedata, %$defaults, %user_default );

  # macro expansion as well on XSL params
  %$params = ( %$params, %user_params );
  $params = $xapply->expand( $params, $defaults );

  my ( $docref, $details ) =
    $xapply->transform( $doc, default => $defaults, param => $params );
  unless ( defined $docref ) {
    remark(
      'error',
      'could not parse document',
      { file => $file, errstr => $xapply->errorstring }
    );
    exit 65;
  }

  chomp($$docref);
  $$docref .= "\n";

  if ( exists $opts{o} ) {
    my $output_file;
    ( $output_file = $opts{o} ) =~
      s/ \Q%{\E (\w+) \Q}\E / $filedata->{$1} || $defaults->{$1} || q{} /egx;

    my $source_file_mode = ( stat $file )[2] & 07777;

    eval {
      my $aw = File::AtomicWrite->new(
        { file => $output_file, mode => $source_file_mode } );
      for my $signame (qw/TERM INT/) {
        $SIG{$signame} = sub { undef $aw };
      }
      my $output_fh = $aw->fh;
      binmode $output_fh, ':raw';
      print $output_fh $$docref;
      $aw->commit;
    };
    if ($@) {
      chomp $@;
      remark(
        'error',
        'could not write file',
        { file => $output_file, errstr => $@ }
      );
      next FILE;
    }

  } else {
    binmode STDOUT, ':raw';
    print $$docref;
  }
}

exit 0;

# expands ~username syntax to full home directory path
sub tilde_expand {
  my @pathes = @_;
  for (@pathes) {
    s{^ ~      # leading tilde
      ([^/]*)  # preserve following data
     }{
      $1 ? (getpwnam $1)[7] : (getpwuid $<)[7] || $ENV{HOME}
        || remark('error',
             'could not lookup user or HOME not set',
             { file => $_ })
        && exit 67;
     }ex;
  }
  return wantarray ? @pathes : "@pathes";
}

# Accepts string of 'key=value key2=value' elements, and a hash
# reference. Populates that hash reference with the keys and values.
sub keyvalue_to_hashref {
  my $string   = shift;
  my $hash_ref = shift;

  my @pairs = split /(?<!(?<!\\)\\) /, $string;
  for my $token (@pairs) {
    my ( $k, $v ) = $token =~ m/^ \s* ([\w.-]+) = (.*) /x;
    $hash_ref->{$k} = $v if defined $k;
  }

  return;
}

sub print_help {
  print <<"HELP";
Usage: $basename [options] file [file2 ...]

Apply XSL files to XML data via the XML::ApplyXSLT module.

Options:
  -h/-?  Display this message.
  -q     Quiet: emit fewer warnings.

  -p pp  Specify XSL parameters as 'key=value key2=value2'
  -X XX  Parser options for XML::LibXML::Parser as 'key=value key2=value2'

  -c cc  Set document 'class' preference.
  -s ss  Set document 'style' preference.
  -P PP  Set stylesheet path option.

  -o tt  Use a custom file output template.

Run perldoc(1) on this script for additional documentation.

HELP
  exit 64;
}

sub remark {
  my $priority   = shift;
  my $message    = shift;
  my $attributes = shift;

  chomp $message;

  my $attr_str;
  if ($attributes) {
    $attr_str = join ', ',
      map { $attributes->{$_} ||= q{}; "$_=$attributes->{$_}" }
      sort keys %$attributes;
  }

  warn "$priority: $message", ( $attr_str ? ": $attr_str" : q{} ), "\n";
  return 1;
}

__END__

=head1 NAME

axp - apply XSL files to XML data via the XML::ApplyXSLT module

=head1 SYNOPSIS

Parse document to standard out using ruleset defaults.

  $ axp index.xml

Translate a set of XML documents into HTML files based on the input
filename using C<safari> style.

  $ axp -o '%{file}.html' -s safari *.xml

=head1 DESCRIPTION

=head2 Overview

Command line interface to L<XML::ApplyXSLT>. Assists in transforming XML
data with Extensible Stylesheet Language (XSL) files. Best suited to
cases where many different stylesheet files for various XML formats are
logically laid out on a filesystem, and can be referenced by C<class> or
C<style> statements. For simpler needs, xsltproc(1) from the XSLT C
library for GNOME will be adequate.

At minimum, a C<path> option will need to be set to lookup a XSL file;
more complex needs can be met through macro expansion of C<class> and
C<style> options against the C<path>, and the use of a ruleset file to
set options based on XML document metadata such as the location on the
filesystem or the root element name.

Encoding is handled by the charset setting in the input XSL file, due
to the use of the C<output_as_bytes> method from L<XML::LibXSLT>. The
C<:raw> encoding is set for output files or standard out to preserve
the bytes.

=head2 Normal Usage

  $ axp [options] file [file2 ...]

See L<"OPTIONS"> for details on the command line switches supported.

Specify one or more XML documents to transform. Output by default goes
to standard out, even for multiple documents. Use the B<-o> option to
save the output to file(s).

=head1 OPTIONS

This script currently supports the following command line switches:

=over 4

=item B<-h>, B<-?>

Prints a brief usage note about the script.

=item B<-q>

Emit fewer warnings.

=item B<-P> I<path-template>

Custom path to stylesheets. Could be static path, if only one
stylesheet exists for a document type, or include C<%{class}> and
C<%{style}> macros to expand depending on document metadata or other
command line options.

  -p '/var/www/htdocs/xsl/%{class}/%{style}.xsl'

Paths should be set in the rules file, so only class and style need to
be altered from the command line. This is because the C<path> option
tends to be static, long, and hard to tab complete.

=item B<-c> I<class>

Sets the C<class> option to be expanded in the C<path> option when
looking up stylesheet files. The C<class> option should be a parent
directory for any number of C<style> files suitable for transforming the
XML format in question.

=item B<-s> I<style>

Sets the C<style> option to be expanded in the C<path> option when
looking up stylesheet files. Should represent a filename. Different
styles allows particular XML document format classes to be rendered in
different ways, such as different HTML for different web browsers.

=item B<-o> I<output-template>

Normally all output is to standard out. This option directs output to a
file. To create one output file for each input XML document, use a
template format that will be expanded using the file metadata (C<file>,
C<dirname>) or preference data (C<class>, C<style>). For instance, to
create a C<doc.html> from a C<doc.xml> input filename, use:

  -o '%{file}.html'

=item B<-p> I<parameters>

Read XSL parameters to be used in the document transformation.
Specify as a space separated list of key=value pairs. Use "\ " if a
literal space is needed; backslash expansion will also allow the use
of \n for a newline and similar.

=item B<-X> I<parameters>

Custom XML::LibXML::Parser options for the config_libxml method.

=back

=head1 RULES

The C<rules> file is parsed into an internal format, then used to
determine whether to handle a file and if so what options to set.
The current ruleset language is simplistic and subject to change
without notice.

  defaults: path=/var/www/htdocs/xsl/%{class}/%{style}.xsl style=default

  # different style repository for different website
  dirname sub "var/www/othersite" \
    path=/var/www/othersite/_xs/%{class}/%{style}.xsl style=default

  # class and style defaults for following types
  rootname eq "eolas" stop class=eolas
  rootname eq "changelog" stop class=cvs2cl

  doctype eq "-//OASIS//DTD DocBook XML V4.2//EN" stop class=docbook42

=head1 BUGS

=head2 Reporting Bugs

If the bug is in the latest version, send a report to the author.
Patches that fix problems or add new features are welcome.

=head2 Known Issues

No way to specify certain configuration options, or pass XSL parameters.
See source for TODO and other comments. Probably a lot of other things
that can be improved, due to this tool being new.

=head1 SEE ALSO

perl(1), XML::ApplyXSLT, XML::LibXML, XML::LibXSLT

The Extensible Stylesheet Language (XSL) specification:

http://www.w3.org/TR/xsl/

=head1 AUTHOR

thrig - Jeremy Mates (cpan:JMATES) C<< <jmates at cpan.org> >>

=head1 COPYRIGHT

Copyright (c) 2015 Jeremy Mates

     Permission to use, copy, modify, and/or distribute this software for
     any purpose with or without fee is hereby granted, provided that the
     above copyright notice and this permission notice appear in all
     copies.

     THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
     WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
     WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
     AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
     DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA
     OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
     TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
     PERFORMANCE OF THIS SOFTWARE.

=cut
