#!/usr/bin/env perl
#
# TODO proper one-line description of role of this script. Run
# perldoc(1) on this file for additional documentation.

use strict;
use warnings;

# clean up env for taint mode ("perldoc perlsec" for more information)
sub BEGIN {
  delete @ENV{qw(IFS CDPATH ENV BASH_ENV)};
  $ENV{PATH} = '/bin:/usr/bin:/usr/local/bin';
}

use Config::OpenSSH::Authkey        ();
use Config::OpenSSH::Authkey::Entry ();
use Getopt::Std;

my ( $comment, $keyopts );

######################################################################
#
# Main

my %opts;
getopts( 'h?C:o:O:', \%opts );
if ( exists $opts{'h'} or exists $opts{'?'} or !@ARGV ) {
  print_help();
  exit 64;
}

# Various key property munging options
$comment = $opts{'C'} if exists $opts{'C'};

if ( exists $opts{'O'} ) {
  $keyopts->{exclusive} = $opts{'O'};
} elsif ( exists $opts{'o'} ) {
  $keyopts->{required} =
    Config::OpenSSH::Authkey::Entry->split_options( $opts{'o'} );
}

# Rest of argv should be auth_key files
for my $ak_file (@ARGV) {

  my $ak = Config::OpenSSH::Authkey->new( { tag_dups => 1, } );
  $ak->file($ak_file);

  while ( my $entry = $ak->iterate ) {
    next if !$entry->can('key');
    if ( $entry->duplicate_of ) {
      warn( "warning: skipping duplicate key: file=$ak_file, key="
          . $entry->key
          . "\n" );
      next;
    }

    $entry->comment($comment) if defined $comment;

    if ( exists $keyopts->{exclusive} ) {
      $entry->options( $keyopts->{exclusive} );
    } elsif ( exists $keyopts->{required} ) {
      for my $options_ref ( @{ $keyopts->{required} } ) {
        $entry->set_option( $options_ref->{name},
          exists $options_ref->{value} ? $options_ref->{value} : () );
      }
    }

    # Emit to stdout, let something else handle the annoying connect-
    # and-xfer-data-to-various-hosts bit (well solved elsewhere).
    print $entry->as_string, "\n";
  }
}

exit 0;

######################################################################
#
# Subroutines

# a generic help blarb
sub print_help {
  warn <<"HELP";
Usage: $0 [opts] keyfile1 [keyfile2 .. keyfileN]

Options:
  -h/-?  Display this message.

  -C cc  Supply a custom comment.
  
  -O bb  Force only options bb to be set.
  -o aa  Require options aa to be set.

Run perldoc(1) on this script for additional documentation.
HELP
}

__END__

=head1 NAME

authkey-tool - TODO

=head1 SYNOPSIS

TODO

=head1 DESCRIPTION

=head2 Overview

Loads, modifies, and distributes OpenSSH public authorized keys to
hosts with the backend manage-authkeys script.

=head2 Normal Usage

  $ authkey-tool [options] keyfile1 [keyfile2 .. keyfileN]

See L<"OPTIONS"> for details on the command line switches supported.

=head1 OPTIONS

This script currently supports the following command line switches:

=over 4

=item B<-h>, B<-?>

Prints a brief usage note about the script.

=item B<-C> I<comment>

Set the comment field on all keys dealt with to I<comment>.

=item B<-o> I<options>

Ensure that the options specified are set on all keys.  This allows
variable C<from> and C<command> options to be set elsewhere, but to
have this utility add the usual command key restrictions:

  -o no-X11-forwarding,no-agent-forwarding,no-port-forwarding,no-pty

=item B<-O> I<options>

Replace any existing options with those specified. Takes preference over
the B<-o> option.

=back

=head1 BUGS

=head2 Reporting Bugs

Newer versions of this script may be available from:

http://github.com/thrig/sial.org-scripts/tree/master

If the bug is in the latest version, send a report to the author.
Patches that fix problems or add new features are welcome.

=head2 Known Issues

No known bugs.

=head1 SEE ALSO

L<Config::OpenSSH::Authkey>, ssh-keygen(1), sshd(8)

=head1 AUTHOR

thrig - Jeremy Mates (cpan:JMATES) C<< <jmates at cpan.org> >>

=head1 COPYRIGHT

Copyright (c) 2015 Jeremy Mates

     Permission to use, copy, modify, and/or distribute this software for
     any purpose with or without fee is hereby granted, provided that the
     above copyright notice and this permission notice appear in all
     copies.

     THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
     WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
     WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
     AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
     DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA
     OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
     TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
     PERFORMANCE OF THIS SOFTWARE.

=cut
