#!/usr/bin/env perl
#
# Maintains OpenSSH known_hosts data.
#
# TODO in-place edit support (via -i switch like perl -i) on the
# known_hosts file?

use strict;
use warnings;

use Getopt::Std;
my %opts;
getopts 'h?mMv', \%opts;

print_help() if $opts{h} or $opts{'?'};

my $khf   = shift || print_help();
my $extra = shift;

open my $file, "< $khf"
 or warn "warning: could not open known hosts: file=$khf, error=$!\n";
my $hkd = parse_known_hosts($file);
if ( not $extra and not @$hkd ) {
  die "error: no host keys found\n";
}

if ($extra) {
  my $ehkd;
  if ( $extra eq '-' ) {
    $ehkd = parse_known_hosts( \*STDIN );
  } else {
    open my $file, "< $extra";
    $ehkd = parse_known_hosts($file);
  }
  $hkd = resolve_host_keys( $hkd, $ehkd );
}

if ( $opts{M} ) {
  $hkd = unmerge_host_keys($hkd);
} elsif ( $opts{m} or $extra ) {
  $hkd = merge_host_keys($hkd);
}

unless (@$hkd) {
  die "error: no host keys found\n";
}

print_known_hosts($hkd);

sub resolve_host_keys {
  my $hkd  = unmerge_host_keys(shift);
  my $ehkd = unmerge_host_keys(shift);

  my ( %hostmap, %keymap );

  for my $i ( 0 .. $#$hkd ) {
    my $hkr = $hkd->[$i];

    for my $host ( @{ $hkr->{hosts} } ) {
      $hostmap{"$hkr->{type} $host"}      = $i;
      $keymap{"$host $hkr->{public_key}"} = $i;
    }
  }

  my ( %delete, @delete );
  for my $hkr (@$ehkd) {
    for my $host ( @{ $hkr->{hosts} } ) {
      if ( exists $hostmap{"$hkr->{type} $host"}
        and not exists $keymap{"$host $hkr->{public_key}"} ) {
        $delete{ $hostmap{"$hkr->{type} $host"} } = 1;
      }
    }
  }

  my @host_keys;
  for my $i ( 0 .. $#$hkd ) {
    my $hkr = $hkd->[$i];
    if ( $delete{$i} ) {
      push @delete, $hkr if $opts{v};
    } else {
      push @host_keys, $hkr;
    }
  }

  if ( $opts{v} ) {
    my $dhkd = merge_host_keys( \@delete );
    for my $hkr (@$dhkd) {
      local $" = ',';
      warn "notice: key deleted: ",
       join( ', ', "type=$hkr->{type}", "hosts=@{$hkr->{hosts}}" ), "\n";
    }
  }

  $ehkd = merge_host_keys($ehkd);
  for my $hkr (@$ehkd) {
    unless ( exists $keymap{"$hkr->{hosts}->[0] $hkr->{public_key}"} ) {
      push @host_keys, $hkr;
      local $" = ',';
      warn "notice: key added: ",
       join( ', ', "type=$hkr->{type}", "hosts=@{$hkr->{hosts}}" ), "\n"
       if $opts{v};
    }
  }

  return \@host_keys;
}

sub print_known_hosts {
  my $hkd = shift;

  # sort by first hostname, then by key type
  for my $hkr (
    sort {
          $a->{hosts}->[0] cmp $b->{hosts}->[0]
       || $a->{type} cmp $b->{type}
    } @$hkd
   ) {

    my $host_spec = join ',', clean_hosts( @{ $hkr->{hosts} } );

    # KLUGE sanity check for missing host I saw once...
    if ( not $host_spec or $host_spec eq q{} ) {
      require Data::Dumper;
      my $d = Data::Dumper->new( [$hkr], ['hkr'] );
      warn "error: skipping as no hosts found, please report to author: ",
       $d->Dump;
      next;
    }

    print join( ' ', $host_spec, $hkr->{type}, $hkr->{public_key} ), "\n";
  }
}

sub unmerge_host_keys {
  my $hkd = shift;
  my @host_keys;
  for my $hkr (@$hkd) {
    my @hosts = @{ $hkr->{hosts} };
    for my $host (@hosts) {
      push @host_keys, { (%$hkr), hosts => [$host] };
    }
  }
  return \@host_keys;
}

# takes hostname => public_key hash reference, returns new hash
# reference with hostnames merged on identical public keys
sub merge_host_keys {
  my $hkd = shift;

  my ( %keys2hosts, @host_keys );

  for my $hkr (@$hkd) {
    push @{ $keys2hosts{"$hkr->{type} $hkr->{public_key}"} },
     @{ $hkr->{hosts} };
  }

  for my $key ( keys %keys2hosts ) {
    my ( $type, $public_key ) = split ' ', $key, 2;
    my @hosts = clean_hosts( @{ $keys2hosts{$key} } );
    push @host_keys,
     {
      type       => $type,
      public_key => $public_key,
      hosts      => \@hosts
     };
  }

  return \@host_keys;
}

# parses OpenSSH known_hosts file into array of hash references
sub parse_known_hosts {
  my $what = shift;

  my @host_keys;

  # by filehandle
  if ( ref $what eq 'GLOB' ) {
    while (<$what>) {
      next if /^#/;
      chomp;
      my ( $host_spec, $type, $public_key ) = split ' ', $_, 3;
      next unless $host_spec and $type and $public_key;

      my @hosts = clean_hosts( split ',', $host_spec );

      push @host_keys,
       {
        type       => $type,
        public_key => $public_key,
        hosts      => \@hosts,
        line       => $.
       };
    }
  } else {
    die "error: do not know how to parse known_hosts from ", ref $what;
  }

  return \@host_keys;
}

# remove duplicates and maintain order among hosts
sub clean_hosts {
  my @hosts  = @_;
  my %unique;

  for my $host (@hosts) {
    $unique{$host} = 1;
  }

  # TODO error check on no host keys being passed in/found?

  return sort { $b cmp $a } keys %unique;
}

sub print_help {
  warn <<"HELP";
Usage: $0 [options] known-hosts-file [new-hosts-file|-]

Maintains OpenSSH known_hosts data.

Options:
  -h/-?  Display this message.

  -m     Merges host key records by public key (default if new host
         keys are supplied).

  -M     Unmerged host key records; one record per host or address.

  -v     Verbose mode. Shows key deletes and additions.

Run perldoc(1) on this script for additional documentation.

HELP
  exit 64;
}

=head1 NAME

ssh-hkutil - maintains OpenSSH known_hosts data

=head1 SYNOPSIS

Clean up an existing C<known_hosts> file:

  $ ssh-hkutil -m ~/.ssh/known_hosts > merged

Work with ssh-keyscan(1) to add the host keys for example.org into the
existing known hosts:

  $ echo example.org | \
    ssh-keyscan -t rsa,dsa -f - | \
    ssh-hkutil ~/.ssh/known_hosts - > new_host_keys

Or just update the known host keys based on the contents of
C<~/.ssh/known_hosts>:

  $ awk '{print $1}' ~/.ssh/known_hosts | \
    ssh-keyscan -t rsa,dsa -f ~/.ssh/known_hosts | \
    ssh-hkutil ~/.ssh/known_hosts - > updated_host_keys

See L<"EXAMPLES"> for more examples.

=head1 DESCRIPTION

=head2 Overview

Interface to OpenSSH known_hosts file: allows merging or unmerging of
related SSH host keys, plus the ability to insert new host keys over
existing ones.

=head2 Normal Usage

  $ ssh-hkutil [options] known-hosts-file [new-hosts-file|-]

See L<"OPTIONS"> for details on the command line switches supported. The
C<known-hosts-file> must be specified, usually C<~/.ssh/known_hosts> for
a user. Optionally, an additional file (or from standard input if a - is
used instead) may be specified containing new hosts keys to merge into
the existing records.

Output will be sent to standard out, errors to standard error. The only
output format supported is the OpenSSH known_hosts file format. Host key
records will be sorted before being printed out.

=head1 OPTIONS

This script currently supports the following command line switches:

=over 4

=item B<-h>, B<-?>

Prints a brief usage note about the script.

=item B<-m>

Merges records with the same public key into single entries. For
example, the two following entries with the example public key of
C<AAAA>:

  example.org ssh-rsa AAAA
  192.0.2.1 ssh-rsa AAAA

Would become the following single entry with B<-m> enabled:

  example.org,192.0.2.1 ssh-rsa AAAA

This merge is done by default if extra host keys are supplied, unless
the B<-M> option is used to keep the keys unmerged.

=item B<-M>

Performs the opposite of B<-m>, such that each host or address is a
separate record.

=item B<-v>

Verbose mode. Shows key deletions and additions.

=back

=head1 EXAMPLES

To cleanup an existing C<known_hosts> file, try the following to see
what changes are made without altering the existing data:

  $ ssh-hkutil known_hosts > sorted
  $ ssh-hkutil -m known_hosts > cleaned
  $ wc -l known_hosts sorted cleaned
  $ diff sorted cleaned | less -S

If the cleaned file looks good, replace the current known_hosts:

  $ mv cleaned known_hosts
  $ rm sorted

The unmerge option B<-M> allows easy single line deletion of offending
host keys, for example with vi(1):

  $ ssh-hkutil -M known_hosts > tmp
  $ vi tmp
  $ ssh-hkutil -m tmp > known_hosts

=head1 BUGS

=head2 Reporting Bugs

Newer versions of this script may be available from:

http://github.com/thrig/sial.org-scripts/tree/master

If the bug is in the latest version, send a report to the author.
Patches that fix problems or add new features are welcome.

=head2 Known Issues

No known issues.

=head1 SEE ALSO

perl(1), ssh-keyscan(1)

=head1 AUTHOR

thrig - Jeremy Mates (cpan:JMATES) C<< <jmates at cpan.org> >>

=head1 COPYRIGHT

Copyright (c) 2015 Jeremy Mates

     Permission to use, copy, modify, and/or distribute this software for
     any purpose with or without fee is hereby granted, provided that the
     above copyright notice and this permission notice appear in all
     copies.

     THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
     WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
     WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
     AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
     DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA
     OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
     TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
     PERFORMANCE OF THIS SOFTWARE.

=cut

