Sample scripts for applying DNS changes via nsupdate(1). Use at own
risk, etc. Not a complete solution; for more extensive changes I usually
end up freezing the zones and updating the zone data directly. This
obviously will suit sites where only a few people are making infrequent
DNS changes; more complicated needs would perhaps need a more
complicated solution.

 * Supports both IPv4 and IPV6 addresses, though confines its operation
   to records under a particular domain (set by the DOM variable), along
   with any associated reverse records.
 * Relies on v4addr and v6addr scripts that can be found over in the
   ../../network directory for reverse DNS calculation or IP address
   input validation.
 * The scripts will need customization, e.g. to set the default domain.
 * Output is to stderr for errors, though 'failed to' results will be
   sent to stdout, allowing for easy capture of any problems over a
   list of hosts:

     while read host ip; do create-host $host $ip; done < input > output

   And then `grep "failed to" output` if there were any errors.
 * More scripts will need to be written to support other record types,
   for sites that cannot freeze the domains for whatever reason.


DNS Server Configuration (for ISC-NAMED)

 1. Create (or duplicate) /etc/nsuk.key, e.g. via rndc-confgen(8). I use
    the same key as for control of the DNS server, as the DNS admins
    have root on the DNS boxes.
 2. Ensure named.conf(5) knows about the key.
 3. Set the zones to allow the key to do things.

The test zones I use are:

  zone "example.net" {
          type master;
          file "master/example.net";
          allow-transfer { localhost; };
          update-policy { grant rndc-key zonesub any; };
  };
  # RFC 5737 test net
  zone "2.0.192.in-addr.arpa" {
          type master;
          file "master/2.0.192.in-addr.arpa";
          allow-transfer { localhost; };
          update-policy { grant rndc-key zonesub any; };
  };
  # RFC 3849 docu subnet - 2001:db8::/32 though using as /64 here
  zone "0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa." {
          type master;
          file "master/0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa";
          allow-transfer { localhost; };
          update-policy { grant rndc-key zonesub any; };
  };

And then manually inspected via:

  dig @localhost axfr example.net
  dig @localhost axfr 0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa
  dig @localhost axfr 2.0.192.in-addr.arpa
