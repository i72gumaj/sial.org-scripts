#!/usr/bin/env perl
#
# Fuzzy spellchecker of words. Run perldoc(1) on this file for
# additional documentation.

use strict;

use DBI ();

use Text::Levenshtein qw{};
use Text::WagnerFischer qw{};
use Text::Metaphone qw{Metaphone};

my $dbh = DBI->connect( "dbi:SQLite:/home/jmates/.fspell/words.db",
  q{}, q{}, { AutoCommit => 0, PrintError => 1, RaiseError => 1 } );

sub print_help;

use Getopt::Std;
my %opts;
getopts( 'h?a', \%opts );
print_help if exists $opts{h} or exists $opts{'?'};

END {
  # Report problems when writing to stdout (perldoc perlopentut)
  unless ( close(STDOUT) ) {
    warn "error: problem closing STDOUT: $!\n";
    exit 74;
  }
}

# TODO means of doing/selecting/adding more entries to
#_init() unless -s 'words.db' > 5000;

#my $findexact = $dbh->prepare(q{SELECT word FROM words WHERE word = ?});
#my $findlike  = $dbh->prepare(q{SELECT word FROM words WHERE word LIKE ?});
my $findmeta =
  $dbh->prepare(q{SELECT word FROM words WHERE metaphone LIKE ?});

my $string = shift or print_help();
#my $metaphone = Metaphone($string);

$findmeta->execute( Metaphone($string) );
my @results;
while ( my @row = $findmeta->fetchrow_array ) {
  my $tl = Text::Levenshtein::distance( "$string", $row[0] );
  if ( $tl == 0 and not exists $opts{a} ) {
    # word spelled right. No news is good news.
    exit 0;
  } else {
    push @results, [ $row[0], $tl ];
  }

  #  print $row[0], " tl ", Text::Levenshtein::distance("$string", $row[0]), " tw ", Text::WagnerFischer::distance($string, $row[0]), "\n";
}

for my $entry ( sort { $a->[1] <=> $b->[1] } @results ) {
  print $entry->[0], ' ', $entry->[1], $/;
}

exit 1;

sub _init {
  # TODO this location not portable!
  my $dict_file = '/usr/share/dict/words';

  $dbh->do(
    q{CREATE TABLE words (word VARCHAR(64) PRIMARY KEY, metaphone VARCHAR(64))}
  );
  $dbh->do(q{CREATE INDEX idx_words_metaphone ON words (metaphone)});

  my $insert =
    $dbh->prepare(q{INSERT INTO words (word, metaphone) VALUES (?, ?)});

  my %seen;

  # might need to walk over multiple files... use <> for this??
  open DF, "< $dict_file" or die "error: could not read $dict_file: $!\n";
  warn "info: converting $dict_file...\n";
  while (<DF>) {
    chomp;

    $_ = lc;

    next if exists $seen{$_};

    if (/[^a-z]/) {
      warn "notice: skipping due to non-alphabetics: $_\n";
      next;
    }

    $insert->execute( $_, Metaphone($_) );
    $seen{$_}++;
    $dbh->commit if $. % 1000 == 0;
  }
  $dbh->commit;
}

# TODO figure out _init, "word" or "word fragments" to lookup.

# a generic help blarb
sub print_help {
  warn <<"HELP";
Usage: $0 [options]

Fuzzy spellchecker of words.

Options:
  -h/-?  Display this message

Run perldoc(1) on this script for additional documentation.

HELP
  exit 64;
}

=head1 NAME

fspell - fuzzy spellchecker of words

=head1 SYNOPSIS

To get a list of words similar to "speling".

$ fspell speling

=head1 DESCRIPTION

This script is aimed at certain people who cannot spell words well,
especially when they don't know the first few letters of a word and
end up bouncing around in a dictionary for ages.

=head1 USAGE

TODO

=head1 OPTIONS

The following options are supported by fspell:

  -h/?    Show a brief help page.

=head1 FILES

/usr/share/dict/words - default dictionary file used; a modestly
populated file available on every Unix, though some hide it under
/usr/dict/words or elsewhere.

=head1 BUGS

=head2 Reporting Bugs

Newer versions of this script may be available from:

http://github.com/thrig/sial.org-scripts/tree/master

If the bug is in the latest version, send a report to the author.
Patches that fix problems or add new features are welcome.

=head2 Known Issues

No known bugs.

=head1 SEE ALSO

perl(1).

=head1 AUTHOR

thrig - Jeremy Mates (cpan:JMATES) C<< <jmates at cpan.org> >>

=head1 COPYRIGHT

Copyright (c) 2015 Jeremy Mates

     Permission to use, copy, modify, and/or distribute this software for
     any purpose with or without fee is hereby granted, provided that the
     above copyright notice and this permission notice appear in all
     copies.

     THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
     WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
     WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
     AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
     DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA
     OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
     TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
     PERFORMANCE OF THIS SOFTWARE.

=cut
