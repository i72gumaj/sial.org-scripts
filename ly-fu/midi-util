#!/usr/bin/env perl
#
# MIDI utility routines for the Perl MIDI suite.

use strict;
use warnings;

use MIDI ();

my %actions = (
  'decompose' => \&handle_decompose,
  'dump'      => \&handle_dump,
  'nixcc'     => \&handle_nixcc,
);
my $EXIT_OK = 0;

my $action = shift // die "Usage: $0 <action> <action-args ..>\n";
die "error: no such action: $action\n" if !exists $actions{$action};
exit $actions{$action}->(@ARGV);

sub handle_decompose {
  my $filename = shift // die "Usage: $0 decompose midi-file\n";

  my $opus = MIDI::Opus->new(
    { 'from_file'                => $filename,
      'exclusive_event_callback' => sub {
        # KLUGE this makes some possibly rash assumptions about the
        # contents of the MIDI files...
        if ( $_[0] eq 'note_on' ) {
          print "note: ", $MIDI::number2note{ $_[3] }, " dtime $_[4]";
        } elsif ( $_[0] eq 'note_off' ) {
          print " note_off: $_[1]\n";
        } else {
          print "event: @_\n";
        }
      },
      'include' => \@MIDI::Event::All_events
    }
  );

  return $EXIT_OK;
}

sub handle_dump {
  my $filename = shift // die "Usage: $0 decompose midi-file\n";

  my $opus = MIDI::Opus->new( { 'from_file' => $filename, } );
  $opus->dump( { dump_tracks => 1 } );

  return $EXIT_OK;
}

# Eliminates control_change from a MIDI file, in particular to remove
# volume changes from lilypond MIDI output. (Handy if say writing an
# organ work in which case there may be no volume change or pedal
# effects.)
sub handle_nixcc {
  my $filename = shift // die "Usage: $0 nixcc midi-file [midi-file-out]\n";
  my $outfile  = shift // $filename;

  my $opus = MIDI::Opus->new( { 'from_file' => $filename, } );
  my $tracks = $opus->tracks_r;

  for my $mtrk (@$tracks) {
    my $events = $mtrk->events_r;
    my @nix;
    for my $i ( 0 .. $#$events ) {
      if ( $events->[$i][0] eq 'control_change' ) {
        unshift @nix, $i;
      }
    }
    for my $i (@nix) {
      splice @$events, $i, 1;
    }
  }

  $opus->write_to_file($outfile);

  return $EXIT_OK;
}
