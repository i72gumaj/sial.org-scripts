#!/usr/bin/env perl
#
# Convert multiple RSA and X509 files between different encoding formats
# such as PEM and DER. Usage:
#
# convert2der *.prv *.key *.crt
# convert2der --inform=DER --outform=PEM *.prv *.key *.crt

use strict;
use warnings;

use File::AtomicWrite ();
use File::Basename qw(basename);
use Getopt::Long qw(GetOptions);

my $basename = basename($0);

my $command = q(
/usr/bin/openssl %{method}
  -inform %{inform} -outform %{outform}
  -in %{file} -out %{tmp_file}
);

my %options = ( inform => 'PEM', outform => 'DER' );

# allow 'convert2pem' to reverse 'convert2der' operation
if ( $basename =~ m/pem$/ ) {
  %options = ( inform => 'DER', outform => 'PEM' );
}

my $key_match_re  = qr/\.(prv|key)$/;
my $cert_match_re = qr/\.(?:crt|cert?)$/;

GetOptions(
  'inform=s'  => \$options{inform},
  'outform=s' => \$options{outform},
  'help|h|?'  => sub {
    print "Usage: $basename [--inform=opt] [--outform=opt] file [..fileN]\n";
    exit 64;
  },
);

for my $filename ( grep -f, @ARGV ) {
  # inherit global options
  my %file_options = %options;
  $file_options{file} = $filename;

  # match filename extension to appropriate openssl subcommand for conversion
  if ( $file_options{file} =~ m/$key_match_re/ ) {
    $file_options{method} = 'rsa';

  } elsif ( $file_options{file} =~ m/$cert_match_re/ ) {
    $file_options{method} = 'x509';

  } else {
    warn
      "warning: skipping unknown file extension: file=$file_options{file}\n";
    next;
  }

  my $writer;
  eval {
    $writer = File::AtomicWrite->new( { file => $file_options{file} } );
    $file_options{tmp_file} = $writer->filename;
  };
  if ($@) {
    chomp($@);
    warn "error: could not create File::AtomicWrite object: $@\n";
    exit 74;
  }
  local $SIG{TERM} = sub { undef $writer };

  $file_options{file} = $filename;
  my @command = template_cmd( $command, \%file_options );

  my $result = system @command;
  if ( $result != 0 ) {
    my $exit_value = $? >> 8;
    warn
      "error: command failed: file=$file_options{file}, exit_value=$exit_value\n";

    undef $writer;
    next;
  }

  eval { $writer->commit(); };
  if ($@) {
    chomp($@);
    warn "error: cannot rename to $file_options{file}: $@\n";
    exit 73;
  }
}

# converts command template string to something executable as list, e.g.
# 'echo %{name}' to qw(echo foo).
sub template_cmd {
  my $template_str = shift;
  my $metadata     = shift;

  my @command = split ' ', $template_str;
  return unless @command;

  for my $str (@command) {
    $str =~ s/ \Q%{\E ([^}]+) \Q}\E / $metadata->{$1} || '' /egx;
  }

  return @command;
}
